generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  firstName String?
  lastName  String?
  phone     String?
  agreeToTerms       Boolean  @default(false)
  subscribeNewsletter Boolean @default(false)
  role      Role     @default(CUSTOMER)
  isActive  Boolean  @default(true)
  vendors   Vendor[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  CUSTOMER
  RETAILER
  WHOLESALER
  SERVICE_PROVIDER
  ADMIN
}

model SellerApplication {
  id                   String   @id @default(cuid())
  sellerRole           Role
  businessType         String
  applicantType        String
  firstName            String
  lastName             String
  email                String
  phone                String
  landline             String?
  identificationType   String
  businessName         String
  businessRegistration String?
  saIdNumber           String?
  vatRegistered        String
  vatNumber            String?
  monthlyRevenue       String?
  physicalStores       String?
  numberOfStores       String?
  supplierToRetailers  String?
  otherMarketplaces    String?
  address              String
  city                 String
  province             String
  postalCode           String
  uniqueProducts       String?
  primaryCategory      String
  stockType            String
  productDescription   String
  ownedBrands          String?
  resellerBrands       String?
  website              String?
  socialMedia          String?
  businessSummary      String
  howDidYouHear        String
  agreeToTerms         Boolean  @default(false)
  status               ApplicationStatus @default(PENDING)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model ContactMessage {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String?
  subject    String
  message    String
  department String?
  createdAt  DateTime @default(now())
}

model NewsArticle {
  id          String   @id @default(cuid())
  title       String
  excerpt     String
  content     String
  author      String
  publishedAt DateTime
  readTime    Int
  category    String
  image       String
  featured    Boolean  @default(false)
  status      ArticleStatus @default(DRAFT)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model ServiceProviderApplication {
  id                  String   @id @default(cuid())
  firstName           String
  lastName            String
  email               String
  phone               String
  dateOfBirth         String?
  idNumber            String
  identificationType  String
  serviceCategories   String[]
  primaryService      String
  experience          String
  qualifications      String?
  portfolio           String?
  hourlyRate          String
  availability        String
  address             String
  city                String
  province            String
  postalCode          String
  serviceRadius       String
  transportMode       String
  businessName        String?
  businessRegistration String?
  vatRegistered       String?
  vatNumber           String?
  bankDetails         String?
  emergencyContact    String?
  workSamples         String?
  clientReferences    String?
  certifications      String?
  insurance           String?
  backgroundCheck     String?
  motivation          String
  goals               String?
  howDidYouHear       String
  agreeToTerms        Boolean  @default(false)
  agreeToBackground   Boolean  @default(false)
  status              ApplicationStatus @default(PENDING)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Catalog: vendors, categories, products, variants, media, inventory

model Vendor {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?
  ownerUserId String
  owner       User          @relation(fields: [ownerUserId], references: [id])
  status      VendorStatus  @default(PENDING)
  isActive    Boolean       @default(false)
  products    CatalogProduct[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum VendorStatus {
  PENDING
  APPROVED
  SUSPENDED
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryChildren", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryChildren")
  path        String
  root        RootCategory?
  isActive    Boolean    @default(true)
  products    CatalogProduct[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model CatalogProduct {
  id             String          @id @default(cuid())
  vendorId       String
  vendor         Vendor          @relation(fields: [vendorId], references: [id])
  categoryId     String
  category       Category        @relation(fields: [categoryId], references: [id])
  title          String
  slug           String          @unique
  description    String?
  status         ProductStatus   @default(DRAFT)
  isActive       Boolean         @default(false)
  featured       Boolean         @default(false)
  seoTitle       String?
  seoDescription String?
  variants       ProductVariant[]
  media          ProductMedia[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model ProductVariant {
  id                  String          @id @default(cuid())
  productId           String
  product             CatalogProduct  @relation(fields: [productId], references: [id])
  sku                 String          @unique
  title               String
  attributes          Json            // { Size: "M", Color: "Black" }
  priceCents          Int
  compareAtPriceCents Int?
  barcode             String?
  weightGrams         Int?            @default(0)
  trackInventory      Boolean         @default(true)
  allowBackorder      Boolean         @default(false)
  stockQuantity       Int             @default(0)
  inventory           InventoryTransaction[]
  media               ProductVariantMedia[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model ProductMedia {
  id        String         @id @default(cuid())
  productId String
  product   CatalogProduct @relation(fields: [productId], references: [id])
  url       String
  type      MediaType      @default(IMAGE)
  position  Int            @default(0)
}

enum MediaType {
  IMAGE
  VIDEO
  MODEL3D
}

model ProductVariantMedia {
  id         String           @id @default(cuid())
  variantId  String
  variant    ProductVariant   @relation(fields: [variantId], references: [id])
  url        String
  type       MediaType        @default(IMAGE)
  position   Int              @default(0)
}

model InventoryTransaction {
  id         String         @id @default(cuid())
  variantId  String
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  change     Int
  reason     InventoryReason
  notes      String?
  createdAt  DateTime       @default(now())
}

enum InventoryReason {
  MANUAL_ADJUSTMENT
  SALE
  RETURN
  RECEIVING
  TRANSFER
}

// Top-level product taxonomy categories
enum RootCategory {
  ANIMALS_PET_SUPPLIES
  APPAREL_ACCESSORIES
  ARTS_ENTERTAINMENT
  BABY_TODDLER
  BUSINESS_INDUSTRIAL
  CAMERAS_OPTICS
  ELECTRONICS
  FOOD_BEVERAGES_TOBACCO
  FURNITURE
  HARDWARE
  HEALTH_BEAUTY
  HOME_GARDEN
  LUGGAGE_BAGS
  MATURE
  MEDIA
  OFFICE_SUPPLIES
  RELIGIOUS_CEREMONIAL
  SOFTWARE
  SPORTING_GOODS
  TOYS_GAMES
  VEHICLES_PARTS
  GIFT_CARDS
  UNCATEGORIZED
  SERVICES
  PRODUCT_ADD_ONS
  BUNDLES
}