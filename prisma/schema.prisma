generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                        @id @default(cuid()) @db.VarChar(25)
  email                 String                        @unique @db.VarChar(254)
  password              String                        @db.VarChar(255)
  name                  String?                       @db.VarChar(150)
  first_name            String?                       @db.VarChar(100)
  last_name             String?                       @db.VarChar(100)
  phone                 String?                       @db.VarChar(32)
  mobile                String?                       @db.VarChar(32)
  date_of_birth         DateTime?
  addresses             UserAddress[]
  agree_to_terms        Boolean                       @default(false)
  subscribe_newsletter  Boolean                       @default(false)
  role                  Role                          @default(CUSTOMER)
  roles                 UserRole[]                    @default([])
  is_active             Boolean                       @default(true)
  vendors               Vendor[]
  managed_vendors       Vendor[]                      @relation("VendorAccountManager")
  customer              Customer?
  wishlist              Wishlist?
  reviews               ProductReview[]
  notification_settings CustomerNotificationSettings?
  created_at            DateTime                      @default(now())
  updated_at            DateTime                      @updatedAt
  AnalyticsEvent        AnalyticsEvent[]
  UserEngagementStats   UserEngagementStats?
  UserDailyActive       UserDailyActive[]

  @@map("users")
}

model CustomerNotificationSettings {
  id                      String   @id @default(cuid()) @db.VarChar(25)
  user_id                 String   @unique @db.VarChar(25)
  user                    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order_confirmations     Boolean  @default(true)
  shipping_updates        Boolean  @default(true)
  delivery_notifications  Boolean  @default(true)
  product_recommendations Boolean  @default(false)
  exclusive_deals         Boolean  @default(false)
  wishlist_updates        Boolean  @default(false)
  shopping_insights       Boolean  @default(false)
  login_alerts            Boolean  @default(true)
  password_changes        Boolean  @default(true)
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  @@map("customer_notification_settings")
}

enum Role {
  CUSTOMER
  RETAILER
  WHOLESALER
  SERVICE_PROVIDER
  ADMIN
  SUPER_ADMIN
}

enum UserRole {
  CUSTOMER
  RETAILER
  SERVICE_PROVIDER
}

model SellerApplication {
  id                    String            @id @default(cuid()) @db.VarChar(25)
  seller_role           Role
  business_type         String            @db.VarChar(50)
  applicant_type        String            @db.VarChar(50)
  first_name            String            @db.VarChar(100)
  last_name             String            @db.VarChar(100)
  email                 String            @db.VarChar(254)
  phone                 String            @db.VarChar(32)
  landline              String?           @db.VarChar(32)
  identification_type   String            @db.VarChar(50)
  business_name         String            @db.VarChar(150)
  business_registration String?           @db.VarChar(100)
  sa_id_number          String?           @db.VarChar(20)
  vat_registered        String            @db.VarChar(10)
  vat_number            String?           @db.VarChar(64)
  monthly_revenue       String?           @db.VarChar(50)
  physical_stores       String?           @db.VarChar(10)
  number_of_stores      String?           @db.VarChar(10)
  supplier_to_retailers String?           @db.VarChar(10)
  other_marketplaces    String?           @db.VarChar(255)
  address               String            @db.VarChar(255)
  city                  String            @db.VarChar(100)
  province              String            @db.VarChar(100)
  postal_code           String            @db.VarChar(20)
  unique_products       String?           @db.VarChar(255)
  primary_category      String            @db.VarChar(100)
  stock_type            String            @db.VarChar(50)
  product_description   String            @db.Text
  owned_brands          String?           @db.VarChar(255)
  reseller_brands       String?           @db.VarChar(255)
  website               String?           @db.VarChar(255)
  social_media          String?           @db.VarChar(255)
  business_summary      String            @db.Text
  how_did_you_hear      String            @db.VarChar(100)
  agree_to_terms        Boolean           @default(false)
  status                ApplicationStatus @default(PENDING)
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  // Relations
  rejection_reasons     ApplicationRejectionReason[] @relation("SellerApplicationRejections")

  @@map("seller_applications")
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model ApplicationRejectionReason {
  id                   String            @id @default(cuid()) @db.VarChar(25)
  application_id       String            @db.VarChar(25)
  application_type     String            @db.VarChar(50)
  rejection_type       String            @db.VarChar(100)
  description          String            @db.Text
  rejected_by_user_id  String?           @db.VarChar(25)
  rejected_at          DateTime          @default(now())
  created_at           DateTime          @default(now())

  // Relations
  application          SellerApplication? @relation("SellerApplicationRejections", fields: [application_id], references: [id])

  @@map("application_rejection_reasons")
}

model ContactMessage {
  id         String   @id @default(cuid()) @db.VarChar(25)
  name       String   @db.VarChar(150)
  email      String   @db.VarChar(254)
  phone      String?  @db.VarChar(32)
  subject    String   @db.VarChar(150)
  message    String   @db.Text
  department String?  @db.VarChar(50)
  created_at DateTime @default(now())

  @@map("contact_messages")
}

model NewsArticle {
  id           String        @id @default(cuid()) @db.VarChar(25)
  title        String        @db.VarChar(200)
  excerpt      String        @db.Text
  content      String        @db.Text
  author       String        @db.VarChar(100)
  published_at DateTime
  read_time    Int
  category     String        @db.VarChar(100)
  image        String        @db.VarChar(2048)
  featured     Boolean       @default(false)
  status       ArticleStatus @default(DRAFT)
  is_active    Boolean       @default(true)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt

  @@map("news_articles")
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model ServiceProviderApplication {
  id                    String            @id @default(cuid()) @db.VarChar(25)
  first_name            String            @db.VarChar(100)
  last_name             String            @db.VarChar(100)
  email                 String            @db.VarChar(254)
  phone                 String            @db.VarChar(32)
  date_of_birth         String?           @db.VarChar(20)
  id_number             String            @db.VarChar(50)
  identification_type   String            @db.VarChar(50)
  service_categories    String[]
  primary_service       String            @db.VarChar(100)
  experience            String            @db.Text
  qualifications        String?           @db.Text
  portfolio             String?           @db.VarChar(255)
  hourly_rate           String            @db.VarChar(50)
  availability          String            @db.VarChar(100)
  address               String            @db.VarChar(255)
  city                  String            @db.VarChar(100)
  province              String            @db.VarChar(100)
  postal_code           String            @db.VarChar(20)
  service_radius        String            @db.VarChar(50)
  transport_mode        String            @db.VarChar(50)
  business_name         String?           @db.VarChar(150)
  business_registration String?           @db.VarChar(100)
  vat_registered        String?           @db.VarChar(10)
  vat_number            String?           @db.VarChar(64)
  bank_details          String?           @db.Text
  emergency_contact     String?           @db.VarChar(255)
  work_samples          String?           @db.Text
  client_references     String?           @db.Text
  certifications        String?           @db.Text
  insurance             String?           @db.Text
  background_check      String?           @db.VarChar(10)
  motivation            String            @db.Text
  goals                 String?           @db.Text
  how_did_you_hear      String            @db.VarChar(100)
  agree_to_terms        Boolean           @default(false)
  agree_to_background   Boolean           @default(false)
  status                ApplicationStatus @default(PENDING)
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt

  @@map("service_provider_applications")
}

model Vendor {
  id                      String                      @id @default(cuid()) @db.VarChar(25)
  name                    String                      @db.VarChar(150)
  slug                    String                      @unique @db.VarChar(191)
  description             String?                     @db.Text
  owner_user_id           String                      @db.VarChar(25)
  owner                   User                        @relation(fields: [owner_user_id], references: [id])
  account_manager_user_id String?                     @db.VarChar(25)
  accountManager          User?                       @relation("VendorAccountManager", fields: [account_manager_user_id], references: [id])
  status                  VendorStatus                @default(PENDING)
  is_active               Boolean                     @default(false)
  seller_type             SellerType
  products                CatalogProduct[]
  discounts               Discount[]
  collections             Collection[]
  notification_settings   VendorNotificationSettings?
  retailer_account        RetailerAccount?
  wholesaler_account      WholesalerAccount?
  created_at              DateTime                    @default(now())
  updated_at              DateTime                    @updatedAt

  @@map("vendors")
}

enum VendorStatus {
  PENDING
  APPROVED
  SUSPENDED
}

enum SellerType {
  RETAILER
  WHOLESALER
}

model UserAddress {
  id            String      @id @default(cuid()) @db.VarChar(25)
  user_id       String      @db.VarChar(25)
  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  type          AddressType @default(BUSINESS)
  address_name  String      @db.VarChar(255)
  address_line1 String      @db.VarChar(255)
  address_line2 String?     @db.VarChar(255)
  city          String      @db.VarChar(100)
  province      String?     @db.VarChar(100)
  country       String      @db.VarChar(100)
  postal_code   String      @db.VarChar(20)
  default_address Boolean   @default(false)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@map("user_addresses")
}

enum AddressType {
  BUSINESS
  BILLING
  SHIPPING
  PERSONAL
}

model Customer {
  id              String            @id @default(cuid()) @db.VarChar(25)
  user_id         String?           @db.VarChar(25)
  user            User?             @relation(fields: [user_id], references: [id])
  email           String            @db.VarChar(254)
  first_name      String            @db.VarChar(100)
  last_name       String            @db.VarChar(100)
  phone           String?           @db.VarChar(32)
  mobile          String?           @db.VarChar(32)
  addresses       CustomerAddress[]
  orders          Order[]
  return_requests ReturnRequest[]
  gift_cards      GiftCard[]
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt

  @@unique([user_id])
  @@map("customers")
}

model CustomerAddress {
  id            String      @id @default(cuid()) @db.VarChar(25)
  customer_id   String      @db.VarChar(25)
  customer      Customer    @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  type          AddressType @default(BUSINESS)
  address_line1 String      @db.VarChar(255)
  address_line2 String?     @db.VarChar(255)
  city          String      @db.VarChar(100)
  province      String?     @db.VarChar(100)
  country       String      @db.VarChar(100)
  postal_code   String      @db.VarChar(20)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@map("customer_addresses")
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  INITIATED
  AUTHORIZED
  PAID
  FAILED
  REFUNDED
}

model Order {
  id                     String                @id @default(cuid()) @db.VarChar(25)
  order_number           String                @unique @db.VarChar(40)
  customer_id            String                @db.VarChar(25)
  customer               Customer              @relation(fields: [customer_id], references: [id])
  email                  String                @db.VarChar(254)
  status                 OrderStatus           @default(PENDING)
  payment_status         PaymentStatus         @default(INITIATED)
  currency               String                @default("ZAR") @db.VarChar(3)
  subtotal_cents         Int
  shipping_cents         Int                   @default(0)
  vat_cents              Int                   @default(0)
  total_cents            Int
  gift_card_amount_cents Int                   @default(0)
  gift_card_code         String?               @db.VarChar(64)
  invoice_url            String?               @db.VarChar(2048)
  receipt_url            String?               @db.VarChar(2048)
  shipping_address       Json
  billing_address        Json
  items                  OrderItem[]
  payments               Payment[]
  events                 OrderEvent[]
  returns                ReturnRequest[]
  discounts              OrderDiscount[]
  gift_card_transactions GiftCardTransaction[]
  discount_redemptions   DiscountRedemption[]
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt

  @@map("orders")
}

model OrderItem {
  id                 String @id @default(cuid()) @db.VarChar(25)
  order_id           String @db.VarChar(25)
  order              Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product_id         String @db.VarChar(25)
  product_variant_id String @db.VarChar(25)
  vendor_id          String @db.VarChar(25)
  sku                String @db.VarChar(64)
  title              String @db.VarChar(200)
  attributes         Json
  price_cents        Int
  quantity           Int
  total_cents        Int

  returns        ReturnItem[]
  discount_items OrderDiscountItem[]

  @@map("order_items")
}

model Payment {
  id             String        @id @default(cuid()) @db.VarChar(25)
  order_id       String        @db.VarChar(25)
  order          Order         @relation(fields: [order_id], references: [id], onDelete: Cascade)
  provider       String        @db.VarChar(50)
  status         PaymentStatus @default(INITIATED)
  amount_cents   Int
  currency       String        @default("ZAR") @db.VarChar(3)
  transaction_id String?       @db.VarChar(128)
  raw_response   Json?
  created_at     DateTime      @default(now())

  @@map("payments")
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  IN_TRANSIT
  RECEIVED
  REFUNDED
  CANCELLED
}

enum ReturnMethod {
  PICKUP
  DROPOFF
}

enum RefundMethod {
  ORIGINAL
  STORE_CREDIT
}

model ReturnRequest {
  id                 String        @id @default(cuid()) @db.VarChar(25)
  order_id           String        @db.VarChar(25)
  order              Order         @relation(fields: [order_id], references: [id])
  customer_id        String        @db.VarChar(25)
  customer           Customer      @relation(fields: [customer_id], references: [id])
  status             ReturnStatus  @default(REQUESTED)
  return_method      ReturnMethod  @default(PICKUP)
  refund_method      RefundMethod  @default(ORIGINAL)
  reason             String?       @db.VarChar(255)
  total_refund_cents Int           @default(0)
  items              ReturnItem[]
  events             ReturnEvent[]
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt

  @@map("return_requests")
}

model ReturnItem {
  id                String        @id @default(cuid()) @db.VarChar(25)
  return_request_id String        @db.VarChar(25)
  return_request    ReturnRequest @relation(fields: [return_request_id], references: [id], onDelete: Cascade)
  order_item_id     String        @db.VarChar(25)
  order_item        OrderItem     @relation(fields: [order_item_id], references: [id])
  quantity          Int           @default(1)
  reason            String        @db.VarChar(255)
  condition         String        @db.VarChar(100)
  description       String?       @db.Text
  refund_cents      Int           @default(0)

  @@map("return_items")
}

model ReturnEvent {
  id                String        @id @default(cuid()) @db.VarChar(25)
  return_request_id String        @db.VarChar(25)
  return_request    ReturnRequest @relation(fields: [return_request_id], references: [id], onDelete: Cascade)
  status            ReturnStatus
  description       String?       @db.Text
  created_at        DateTime      @default(now())

  @@map("return_events")
}

model OrderEvent {
  id             String         @id @default(cuid()) @db.VarChar(25)
  order_id       String         @db.VarChar(25)
  order          Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  status         OrderStatus?
  payment_status PaymentStatus?
  description    String?        @db.Text
  created_at     DateTime       @default(now())

  @@map("order_events")
}

enum DiscountType {
  PRODUCT_AMOUNT
  PRODUCT_PERCENT
  BUY_X_GET_Y
  ORDER_AMOUNT
  ORDER_PERCENT
  FREE_SHIPPING
}

enum DiscountMethod {
  CODE
  AUTOMATIC
}

model Discount {
  id                        String               @id @default(cuid()) @db.VarChar(25)
  code                      String?              @unique @db.VarChar(50)
  title                     String?              @db.VarChar(150)
  description               String?              @db.Text
  type                      DiscountType
  method                    DiscountMethod       @default(CODE)
  vendor_id                 String?              @db.VarChar(25)
  vendor                    Vendor?              @relation(fields: [vendor_id], references: [id])
  created_by_user_id        String?              @db.VarChar(25)
  amount_cents              Int?
  percent                   Int?
  buy_x_quantity            Int?
  get_y_quantity            Int?
  min_purchase_amount_cents Int?
  min_quantity              Int?
  usage_limit_total         Int?
  usage_limit_per_customer  Int?
  applies_to_all_products   Boolean              @default(false)
  combine_with_product      Boolean              @default(true)
  combine_with_order        Boolean              @default(false)
  combine_with_shipping     Boolean              @default(false)
  starts_at                 DateTime?
  ends_at                   DateTime?
  is_active                 Boolean              @default(true)
  shipping_countries        String[]
  products                  DiscountProduct[]
  categories                DiscountCategory[]
  collections               DiscountCollection[]
  redemptions               DiscountRedemption[]
  order_discounts           OrderDiscount[]
  created_at                DateTime             @default(now())
  updated_at                DateTime             @updatedAt

  @@map("discounts")
}

model Collection {
  id          String               @id @default(cuid()) @db.VarChar(25)
  vendor_id   String               @db.VarChar(25)
  vendor      Vendor               @relation(fields: [vendor_id], references: [id])
  name        String               @db.VarChar(150)
  slug        String               @unique @db.VarChar(191)
  description String?              @db.Text
  image       String?              @db.VarChar(2048)
  is_active   Boolean              @default(true)
  products    CollectionProduct[]
  discounts   DiscountCollection[]
  created_at  DateTime             @default(now())
  updated_at  DateTime             @updatedAt

  @@map("collections")
}

model CollectionProduct {
  id            String     @id @default(cuid()) @db.VarChar(25)
  collection_id String     @db.VarChar(25)
  collection    Collection @relation(fields: [collection_id], references: [id], onDelete: Cascade)
  product_id    String     @db.VarChar(25)

  @@unique([collection_id, product_id])
  @@map("collection_products")
}

model DiscountCollection {
  id            String     @id @default(cuid()) @db.VarChar(25)
  discount_id   String     @db.VarChar(25)
  discount      Discount   @relation(fields: [discount_id], references: [id], onDelete: Cascade)
  collection_id String     @db.VarChar(25)
  collection    Collection @relation(fields: [collection_id], references: [id], onDelete: Cascade)

  @@unique([discount_id, collection_id])
  @@map("discount_collections")
}

model VendorNotificationSettings {
  id                          String   @id @default(cuid()) @db.VarChar(25)
  vendor_id                   String   @unique @db.VarChar(25)
  vendor                      Vendor   @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
  email_notifications_enabled Boolean  @default(true)
  order_new                   Boolean  @default(true)
  order_paid                  Boolean  @default(true)
  order_cancelled             Boolean  @default(true)
  order_refunded              Boolean  @default(true)
  return_requested            Boolean  @default(true)
  low_stock                   Boolean  @default(true)
  low_stock_threshold         Int      @default(5)
  product_status_change       Boolean  @default(true)
  review_received             Boolean  @default(true)
  payout_sent                 Boolean  @default(true)
  message_received            Boolean  @default(true)
  created_at                  DateTime @default(now())
  updated_at                  DateTime @updatedAt

  @@map("vendor_notification_settings")
}

model DiscountProduct {
  id          String   @id @default(cuid()) @db.VarChar(25)
  discount_id String   @db.VarChar(25)
  discount    Discount @relation(fields: [discount_id], references: [id], onDelete: Cascade)
  product_id  String   @db.VarChar(25)

  @@unique([discount_id, product_id])
  @@map("discount_products")
}

model DiscountCategory {
  id          String   @id @default(cuid()) @db.VarChar(25)
  discount_id String   @db.VarChar(25)
  discount    Discount @relation(fields: [discount_id], references: [id], onDelete: Cascade)
  category_id String   @db.VarChar(25)

  @@unique([discount_id, category_id])
  @@map("discount_categories")
}

model DiscountRedemption {
  id           String   @id @default(cuid()) @db.VarChar(25)
  discount_id  String   @db.VarChar(25)
  discount     Discount @relation(fields: [discount_id], references: [id], onDelete: Cascade)
  order_id     String?  @db.VarChar(25)
  order        Order?   @relation(fields: [order_id], references: [id])
  customer_id  String?  @db.VarChar(25)
  amount_cents Int      @default(0)
  code_used    String?  @db.VarChar(50)
  created_at   DateTime @default(now())

  @@map("discount_redemptions")
}

model OrderDiscount {
  id           String              @id @default(cuid()) @db.VarChar(25)
  order_id     String              @db.VarChar(25)
  order        Order               @relation(fields: [order_id], references: [id], onDelete: Cascade)
  discount_id  String?             @db.VarChar(25)
  discount     Discount?           @relation(fields: [discount_id], references: [id])
  code         String?             @db.VarChar(50)
  amount_cents Int
  description  String?             @db.VarChar(255)
  items        OrderDiscountItem[]

  @@map("order_discounts")
}

model OrderDiscountItem {
  id                 String        @id @default(cuid()) @db.VarChar(25)
  order_discount_id  String        @db.VarChar(25)
  order_discount     OrderDiscount @relation(fields: [order_discount_id], references: [id], onDelete: Cascade)
  order_item_id      String        @db.VarChar(25)
  order_item         OrderItem     @relation(fields: [order_item_id], references: [id])
  product_id         String        @db.VarChar(25)
  product_variant_id String        @db.VarChar(25)
  amount_cents       Int

  @@map("order_discount_items")
}

model RetailerAccount {
  id         String   @id @default(cuid()) @db.VarChar(25)
  vendor_id  String   @unique @db.VarChar(25)
  vendor     Vendor   @relation(fields: [vendor_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("retailer_accounts")
}

model WholesalerAccount {
  id         String   @id @default(cuid()) @db.VarChar(25)
  vendor_id  String   @unique @db.VarChar(25)
  vendor     Vendor   @relation(fields: [vendor_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("wholesaler_accounts")
}

model Category {
  id          String           @id @default(cuid()) @db.VarChar(25)
  name        String           @db.VarChar(150)
  slug        String           @unique @db.VarChar(191)
  description String?          @db.Text
  parent_id   String?          @db.VarChar(25)
  parent      Category?        @relation("CategoryChildren", fields: [parent_id], references: [id])
  children    Category[]       @relation("CategoryChildren")
  path        String           @db.VarChar(512)
  root        RootCategory?
  is_active   Boolean          @default(true)
  products    CatalogProduct[]
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt

  @@map("categories")
}

model CatalogProduct {
  id                  String           @id @default(cuid()) @db.VarChar(25)
  vendor_id           String           @db.VarChar(25)
  vendor              Vendor           @relation(fields: [vendor_id], references: [id])
  category_id         String           @db.VarChar(25)
  category            Category         @relation(fields: [category_id], references: [id])
  title               String           @db.VarChar(200)
  slug                String           @unique @db.VarChar(191)
  description         String?          @db.Text
  status              ProductStatus    @default(DRAFT)
  is_active           Boolean          @default(false)
  featured            Boolean          @default(false)
  seo_title           String?          @db.VarChar(70)
  seo_description     String?          @db.VarChar(160)
  features            String[]
  available_locations String[]
  tags                String[]
  delivery_min_days   Int?
  delivery_max_days   Int?
  weight              Float?
  weight_unit         String?          @db.VarChar(10)
  length              Float?
  width               Float?
  height              Float?
  dimension_unit      String?          @db.VarChar(10)
  options             ProductOption[]
  variants            ProductVariant[]
  media               ProductMedia[]
  wishlist_items      WishlistItem[]
  reviews             ProductReview[]
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt

  @@map("catalog_products")
}

model ProductReview {
  id         String         @id @default(cuid()) @db.VarChar(25)
  product_id String         @db.VarChar(25)
  product    CatalogProduct @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user_id    String         @db.VarChar(25)
  user       User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  rating     Int
  comment    String         @db.Text
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt

  @@unique([product_id, user_id])
  @@map("product_reviews")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model ProductVariant {
  id                     String                      @id @default(cuid()) @db.VarChar(25)
  product_id             String                      @db.VarChar(25)
  product                CatalogProduct              @relation(fields: [product_id], references: [id])
  sku                    String                      @unique @db.VarChar(64)
  title                  String                      @db.VarChar(200)
  attributes             Json
  price_cents            Int
  compare_at_price_cents Int?
  barcode                String?                     @db.VarChar(64)
  weight_grams           Int?                        @default(0)
  track_inventory        Boolean                     @default(true)
  allow_backorder        Boolean                     @default(false)
  stock_quantity         Int                         @default(0)
  available_locations    String[]
  inventory              InventoryTransaction[]
  selected_option_values ProductVariantOptionValue[]
  media                  ProductVariantMedia[]
  created_at             DateTime                    @default(now())
  updated_at             DateTime                    @updatedAt

  @@map("product_variants")
}

model ProductOption {
  id                 String                      @id @default(cuid()) @db.VarChar(25)
  product_id         String                      @db.VarChar(25)
  product            CatalogProduct              @relation(fields: [product_id], references: [id], onDelete: Cascade)
  name               String                      @db.VarChar(100)
  position           Int                         @default(0)
  values             ProductOptionValue[]
  variant_selections ProductVariantOptionValue[]
  created_at         DateTime                    @default(now())
  updated_at         DateTime                    @updatedAt

  @@map("product_options")
}

model ProductOptionValue {
  id        String                      @id @default(cuid()) @db.VarChar(25)
  option_id String                      @db.VarChar(25)
  option    ProductOption               @relation(fields: [option_id], references: [id], onDelete: Cascade)
  value     String                      @db.VarChar(100)
  position  Int                         @default(0)
  variants  ProductVariantOptionValue[]

  @@map("product_option_values")
}

model ProductVariantOptionValue {
  id              String             @id @default(cuid()) @db.VarChar(25)
  variant_id      String             @db.VarChar(25)
  variant         ProductVariant     @relation(fields: [variant_id], references: [id], onDelete: Cascade)
  option_id       String             @db.VarChar(25)
  option          ProductOption      @relation(fields: [option_id], references: [id], onDelete: Cascade)
  option_value_id String             @db.VarChar(25)
  optionValue     ProductOptionValue @relation(fields: [option_value_id], references: [id], onDelete: Cascade)

  @@unique([variant_id, option_id])
  @@index([variant_id])
  @@index([option_id])
  @@index([option_value_id])
  @@map("product_variant_option_values")
}

model ProductMedia {
  id         String         @id @default(cuid()) @db.VarChar(25)
  product_id String         @db.VarChar(25)
  product    CatalogProduct @relation(fields: [product_id], references: [id])
  url        String         @db.VarChar(2048)
  type       MediaType      @default(IMAGE)
  position   Int            @default(0)

  @@map("product_media")
}

enum MediaType {
  IMAGE
  VIDEO
  MODEL3D
}

model ProductVariantMedia {
  id         String         @id @default(cuid()) @db.VarChar(25)
  variant_id String         @db.VarChar(25)
  variant    ProductVariant @relation(fields: [variant_id], references: [id])
  url        String         @db.VarChar(2048)
  type       MediaType      @default(IMAGE)
  position   Int            @default(0)

  @@map("product_variant_media")
}

model Wishlist {
  id         String         @id @default(cuid()) @db.VarChar(25)
  user_id    String         @unique @db.VarChar(25)
  user       User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items      WishlistItem[]
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt

  @@map("wishlists")
}

model WishlistItem {
  id                 String         @id @default(cuid()) @db.VarChar(25)
  wishlist_id        String         @db.VarChar(25)
  wishlist           Wishlist       @relation(fields: [wishlist_id], references: [id], onDelete: Cascade)
  product_id         String         @db.VarChar(25)
  product            CatalogProduct @relation(fields: [product_id], references: [id])
  product_variant_id String?        @db.VarChar(25)
  created_at         DateTime       @default(now())

  @@unique([wishlist_id, product_id, product_variant_id])
  @@map("wishlist_items")
}

model InventoryTransaction {
  id         String          @id @default(cuid()) @db.VarChar(25)
  variant_id String          @db.VarChar(25)
  variant    ProductVariant  @relation(fields: [variant_id], references: [id])
  change     Int
  reason     InventoryReason
  notes      String?         @db.Text
  created_at DateTime        @default(now())

  @@map("inventory_transactions")
}

enum InventoryReason {
  MANUAL_ADJUSTMENT
  SALE
  RETURN
  RECEIVING
  TRANSFER
}

model VatRate {
  id         String   @id @default(cuid()) @db.VarChar(25)
  country    String   @db.VarChar(100)
  province   String?  @db.VarChar(100)
  rate       Float
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([country, province])
  @@map("vat_rates")
}

enum GiftCardStatus {
  ACTIVE
  INACTIVE
}

model GiftCard {
  id                  String                @id @default(cuid()) @db.VarChar(25)
  code                String                @unique @db.VarChar(50)
  customer_id         String?               @db.VarChar(25)
  customer            Customer?             @relation(fields: [customer_id], references: [id])
  initial_value_cents Int
  balance_cents       Int
  status              GiftCardStatus        @default(ACTIVE)
  notes               String?               @db.Text
  image               String?               @db.VarChar(2048)
  expires_at          DateTime?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  transactions        GiftCardTransaction[]

  @@map("gift_cards")
}

enum GiftCardTransactionType {
  ISSUE
  REDEEM
  REFUND
  ADJUSTMENT
}

model GiftCardTransaction {
  id           String                  @id @default(cuid()) @db.VarChar(25)
  gift_card_id String                  @db.VarChar(25)
  gift_card    GiftCard                @relation(fields: [gift_card_id], references: [id], onDelete: Cascade)
  type         GiftCardTransactionType
  amount_cents Int
  notes        String?                 @db.Text
  order_id     String?                 @db.VarChar(25)
  order        Order?                  @relation(fields: [order_id], references: [id])
  created_at   DateTime                @default(now())

  @@map("gift_card_transactions")
}

enum RootCategory {
  ANIMALS_PET_SUPPLIES
  APPAREL_ACCESSORIES
  ARTS_ENTERTAINMENT
  BABY_TODDLER
  BUSINESS_INDUSTRIAL
  CAMERAS_OPTICS
  ELECTRONICS
  FOOD_BEVERAGES_TOBACCO
  FURNITURE
  HARDWARE
  HEALTH_BEAUTY
  HOME_GARDEN
  LUGGAGE_BAGS
  MATURE
  MEDIA
  OFFICE_SUPPLIES
  RELIGIOUS_CEREMONIAL
  SOFTWARE
  SPORTING_GOODS
  TOYS_GAMES
  VEHICLES_PARTS
  GIFT_CARDS
  UNCATEGORIZED
  SERVICES
  PRODUCT_ADD_ONS
  BUNDLES
}

model AnalyticsEvent {
  id            String   @id @default(cuid()) @db.VarChar(25)
  user_id       String?  @db.VarChar(25)
  user          User?    @relation(fields: [user_id], references: [id])
  session_id    String?  @db.VarChar(50)
  event_type    String   @db.VarChar(50)
  page_path     String?  @db.VarChar(512)
  page_title    String?  @db.VarChar(200)
  referrer      String?  @db.VarChar(512)
  product_id    String?  @db.VarChar(25)
  collection_id String?  @db.VarChar(25)
  vendor_id     String?  @db.VarChar(25)
  search_query  String?  @db.VarChar(200)
  duration_ms   Int?
  scroll_depth  Int?
  attributes    Json?
  user_agent    String?  @db.VarChar(512)
  ip            String?  @db.VarChar(64)
  created_at    DateTime @default(now())

  @@index([user_id])
  @@index([session_id])
  @@index([event_type])
  @@index([created_at])
  @@index([product_id])
  @@index([collection_id])
  @@map("analytics_events")
}

model UserEngagementStats {
  id                  String   @id @default(cuid()) @db.VarChar(25)
  user_id             String   @unique @db.VarChar(25)
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  first_active_date   DateTime
  last_active_date    DateTime
  days_active_count   Int      @default(0)
  current_streak_days Int      @default(0)
  longest_streak_days Int      @default(0)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  @@map("user_engagement_stats")
}

model UserDailyActive {
  id            String   @id @default(cuid()) @db.VarChar(25)
  user_id       String   @db.VarChar(25)
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  date          DateTime
  session_count Int      @default(0)
  event_count   Int      @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@unique([user_id, date])
  @@index([date])
  @@map("user_daily_active")
}

model EmailSubscription {
  id         String   @id @default(cuid()) @db.VarChar(25)
  email      String   @unique @db.VarChar(254)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("email_subscriptions")
}
