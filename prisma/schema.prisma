generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  first_name String?
  last_name  String?
  phone     String?
  mobile    String?
  date_of_birth DateTime?
  addresses UserAddress[]
  agree_to_terms       Boolean  @default(false)
  subscribe_newsletter Boolean @default(false)
  role      Role     @default(CUSTOMER)
  is_active  Boolean  @default(true)
  vendors   Vendor[]
  managed_vendors Vendor[] @relation("VendorAccountManager")
  customer  Customer?
  wishlist  Wishlist?
  reviews   Review[]
  notification_settings UserNotificationSettings?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model UserNotificationSettings {
  id                 String  @id @default(cuid())
  user_id            String  @unique
  user               User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order_confirmations Boolean @default(true)
  shipping_updates    Boolean @default(true)
  delivery_notifications Boolean @default(true)
  product_recommendations Boolean @default(false)
  exclusive_deals     Boolean @default(false)
  wishlist_updates    Boolean @default(false)
  shopping_insights   Boolean @default(false)
  login_alerts        Boolean @default(true)
  password_changes    Boolean @default(true)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  @@map("user_notification_settings")
}

enum Role {
  CUSTOMER
  RETAILER
  WHOLESALER
  SERVICE_PROVIDER
  ADMIN
}

model SellerApplication {
  id                   String   @id @default(cuid())
  seller_role           Role
  business_type         String
  applicant_type        String
  first_name            String
  last_name             String
  email                String
  phone                String
  landline             String?
  identification_type   String
  business_name         String
  business_registration String?
  sa_id_number           String?
  vat_registered        String
  vat_number            String?
  monthly_revenue       String?
  physical_stores       String?
  number_of_stores       String?
  supplier_to_retailers  String?
  other_marketplaces    String?
  address              String
  city                 String
  province             String
  postal_code           String
  unique_products       String?
  primary_category      String
  stock_type            String
  product_description   String
  owned_brands          String?
  reseller_brands       String?
  website              String?
  social_media          String?
  business_summary      String
  how_did_you_hear        String
  agree_to_terms         Boolean  @default(false)
  status               ApplicationStatus @default(PENDING)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  @@map("seller_applications")
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model ContactMessage {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String?
  subject    String
  message    String
  department String?
  created_at  DateTime @default(now())

  @@map("contact_messages")
}

model NewsArticle {
  id          String   @id @default(cuid())
  title       String
  excerpt     String
  content     String
  author      String
  published_at DateTime
  read_time    Int
  category    String
  image       String
  featured    Boolean  @default(false)
  status      ArticleStatus @default(DRAFT)
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("news_articles")
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model ServiceProviderApplication {
  id                  String   @id @default(cuid())
  first_name           String
  last_name            String
  email               String
  phone               String
  date_of_birth         String?
  id_number            String
  identification_type  String
  service_categories   String[]
  primary_service      String
  experience          String
  qualifications      String?
  portfolio           String?
  hourly_rate          String
  availability        String
  address             String
  city                String
  province            String
  postal_code          String
  service_radius       String
  transport_mode       String
  business_name        String?
  business_registration String?
  vat_registered       String?
  vat_number           String?
  bank_details         String?
  emergency_contact    String?
  work_samples         String?
  client_references    String?
  certifications      String?
  insurance           String?
  background_check     String?
  motivation          String
  goals               String?
  how_did_you_hear       String
  agree_to_terms        Boolean  @default(false)
  agree_to_background   Boolean  @default(false)
  status              ApplicationStatus @default(PENDING)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@map("service_provider_applications")
}

model Vendor {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?
  owner_user_id String
  owner       User          @relation(fields: [owner_user_id], references: [id])
  account_manager_user_id String?
  accountManager       User?         @relation("VendorAccountManager", fields: [account_manager_user_id], references: [id])
  status      VendorStatus  @default(PENDING)
  is_active    Boolean       @default(false)
  seller_type  SellerType
  products    CatalogProduct[]
  discounts   Discount[]
  collections Collection[]
  retailer_account  RetailerAccount?
  wholesaler_account WholesalerAccount?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt

  @@map("vendors")
}

enum VendorStatus {
  PENDING
  APPROVED
  SUSPENDED
}

enum SellerType {
  RETAILER
  WHOLESALER
}

model UserAddress {
  id          String      @id @default(cuid())
  user_id      String
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  type        AddressType @default(BUSINESS)
  address_line1 String
  address_line2 String?
  city        String
  province    String?
  country     String
  postal_code  String
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  @@map("user_addresses")
}

enum AddressType {
  BUSINESS
  BILLING
  SHIPPING
  PERSONAL
}

model Customer {
  id         String   @id @default(cuid())
  user_id    String?
  user       User?    @relation(fields: [user_id], references: [id])
  email      String
  first_name String
  last_name  String
  phone      String?
  mobile     String?
  addresses  CustomerAddress[]
  orders     Order[]
  return_requests ReturnRequest[]
  gift_cards GiftCard[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id])
  @@map("customers")
}

model CustomerAddress {
  id            String      @id @default(cuid())
  customer_id   String
  customer      Customer    @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  type          AddressType @default(BUSINESS)
  address_line1 String
  address_line2 String?
  city          String
  province      String?
  country       String
  postal_code   String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@map("customer_addresses")
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  INITIATED
  AUTHORIZED
  PAID
  FAILED
  REFUNDED
}

model Order {
  id                String       @id @default(cuid())
  order_number      String       @unique
  customer_id       String
  customer          Customer     @relation(fields: [customer_id], references: [id])
  email             String
  status            OrderStatus  @default(PENDING)
  payment_status    PaymentStatus @default(INITIATED)
  currency          String       @default("ZAR")
  subtotal_cents    Int
  shipping_cents    Int          @default(0)
  vat_cents         Int          @default(0)
  total_cents       Int
  gift_card_amount_cents Int     @default(0)
  gift_card_code    String?
  shipping_address  Json
  billing_address   Json
  items             OrderItem[]
  payments          Payment[]
  events            OrderEvent[]
  returns           ReturnRequest[]
  discounts         OrderDiscount[]
  gift_card_transactions GiftCardTransaction[]
  discount_redemptions DiscountRedemption[]
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  @@map("orders")
}

model OrderItem {
  id                 String         @id @default(cuid())
  order_id           String
  order              Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product_id         String
  product_variant_id String
  vendor_id          String
  sku                String
  title              String
  attributes         Json
  price_cents        Int
  quantity           Int
  total_cents        Int

  returns            ReturnItem[]
  discount_items     OrderDiscountItem[]

  @@map("order_items")
}

model Payment {
  id              String        @id @default(cuid())
  order_id        String
  order           Order         @relation(fields: [order_id], references: [id], onDelete: Cascade)
  provider        String
  status          PaymentStatus @default(INITIATED)
  amount_cents    Int
  currency        String        @default("ZAR")
  transaction_id  String?
  raw_response    Json?
  created_at      DateTime      @default(now())

  @@map("payments")
}

// Returns
enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  IN_TRANSIT
  RECEIVED
  REFUNDED
  CANCELLED
}

enum ReturnMethod {
  PICKUP
  DROPOFF
}

enum RefundMethod {
  ORIGINAL
  STORE_CREDIT
}

model ReturnRequest {
  id                String        @id @default(cuid())
  order_id          String
  order             Order         @relation(fields: [order_id], references: [id])
  customer_id       String
  customer          Customer      @relation(fields: [customer_id], references: [id])
  status            ReturnStatus  @default(REQUESTED)
  return_method     ReturnMethod  @default(PICKUP)
  refund_method     RefundMethod  @default(ORIGINAL)
  reason            String?
  total_refund_cents Int          @default(0)
  items             ReturnItem[]
  events            ReturnEvent[]
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@map("return_requests")
}

model ReturnItem {
  id                 String         @id @default(cuid())
  return_request_id  String
  return_request     ReturnRequest  @relation(fields: [return_request_id], references: [id], onDelete: Cascade)
  order_item_id      String
  order_item         OrderItem      @relation(fields: [order_item_id], references: [id])
  quantity           Int            @default(1)
  reason             String
  condition          String
  description        String?
  refund_cents       Int            @default(0)

  @@map("return_items")
}

model ReturnEvent {
  id                String        @id @default(cuid())
  return_request_id String
  return_request    ReturnRequest @relation(fields: [return_request_id], references: [id], onDelete: Cascade)
  status            ReturnStatus
  description       String?
  created_at        DateTime      @default(now())

  @@map("return_events")
}

model OrderEvent {
  id               String         @id @default(cuid())
  order_id         String
  order            Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  status           OrderStatus?
  payment_status   PaymentStatus?
  description      String?
  created_at       DateTime       @default(now())

  @@map("order_events")
}

enum DiscountType {
  PRODUCT_AMOUNT
  PRODUCT_PERCENT
  BUY_X_GET_Y
  ORDER_AMOUNT
  ORDER_PERCENT
  FREE_SHIPPING
}

enum DiscountMethod {
  CODE
  AUTOMATIC
}

model Discount {
  id                         String          @id @default(cuid())
  code                       String?         @unique
  title                      String?
  description                String?
  type                       DiscountType
  method                     DiscountMethod  @default(CODE)
  vendor_id                  String?
  vendor                     Vendor?         @relation(fields: [vendor_id], references: [id])
  created_by_user_id         String?
  amount_cents               Int?
  percent                    Int?
  buy_x_quantity             Int?
  get_y_quantity             Int?
  min_purchase_amount_cents  Int?
  min_quantity               Int?
  usage_limit_total          Int?
  usage_limit_per_customer   Int?
  applies_to_all_products    Boolean         @default(false)
  combine_with_product       Boolean         @default(true)
  combine_with_order         Boolean         @default(false)
  combine_with_shipping      Boolean         @default(false)
  starts_at                  DateTime?
  ends_at                    DateTime?
  is_active                  Boolean         @default(true)
  shipping_countries         String[]
  products                   DiscountProduct[]
  categories                 DiscountCategory[]
  collections                DiscountCollection[]
  redemptions                DiscountRedemption[]
  order_discounts            OrderDiscount[]
  created_at                 DateTime        @default(now())
  updated_at                 DateTime        @updatedAt

  @@map("discounts")
}

// Seller Collections (marketing groupings)
model Collection {
  id          String   @id @default(cuid())
  vendor_id   String
  vendor      Vendor   @relation(fields: [vendor_id], references: [id])
  name        String
  slug        String   @unique
  description String?
  image       String?
  is_active   Boolean  @default(true)
  products    CollectionProduct[]
  discounts   DiscountCollection[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("collections")
}

model CollectionProduct {
  id            String   @id @default(cuid())
  collection_id String
  collection    Collection @relation(fields: [collection_id], references: [id], onDelete: Cascade)
  product_id    String

  @@unique([collection_id, product_id])
  @@map("collection_products")
}

model DiscountCollection {
  id           String   @id @default(cuid())
  discount_id  String
  discount     Discount @relation(fields: [discount_id], references: [id], onDelete: Cascade)
  collection_id String
  collection   Collection @relation(fields: [collection_id], references: [id], onDelete: Cascade)

  @@unique([discount_id, collection_id])
  @@map("discount_collections")
}

model DiscountProduct {
  id           String   @id @default(cuid())
  discount_id  String
  discount     Discount @relation(fields: [discount_id], references: [id], onDelete: Cascade)
  product_id   String

  @@unique([discount_id, product_id])
  @@map("discount_products")
}

model DiscountCategory {
  id           String   @id @default(cuid())
  discount_id  String
  discount     Discount @relation(fields: [discount_id], references: [id], onDelete: Cascade)
  category_id  String

  @@unique([discount_id, category_id])
  @@map("discount_categories")
}

model DiscountRedemption {
  id           String   @id @default(cuid())
  discount_id  String
  discount     Discount @relation(fields: [discount_id], references: [id], onDelete: Cascade)
  order_id     String?
  order        Order?   @relation(fields: [order_id], references: [id])
  customer_id  String?
  amount_cents Int      @default(0)
  code_used    String?
  created_at   DateTime @default(now())

  @@map("discount_redemptions")
}

model OrderDiscount {
  id           String   @id @default(cuid())
  order_id     String
  order        Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  discount_id  String?
  discount     Discount? @relation(fields: [discount_id], references: [id])
  code         String?
  amount_cents Int
  description  String?
  items        OrderDiscountItem[]

  @@map("order_discounts")
}

model OrderDiscountItem {
  id                String   @id @default(cuid())
  order_discount_id String
  order_discount    OrderDiscount @relation(fields: [order_discount_id], references: [id], onDelete: Cascade)
  order_item_id     String
  order_item        OrderItem @relation(fields: [order_item_id], references: [id])
  product_id        String
  product_variant_id String
  amount_cents      Int

  @@map("order_discount_items")
}

model RetailerAccount {
  id        String @id @default(cuid())
  vendor_id  String @unique
  vendor    Vendor @relation(fields: [vendor_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("retailer_accounts")
}

model WholesalerAccount {
  id        String @id @default(cuid())
  vendor_id  String @unique
  vendor    Vendor @relation(fields: [vendor_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("wholesaler_accounts")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  parent_id    String?
  parent      Category?  @relation("CategoryChildren", fields: [parent_id], references: [id])
  children    Category[] @relation("CategoryChildren")
  path        String
  root        RootCategory?
  is_active    Boolean    @default(true)
  products    CatalogProduct[]
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  @@map("categories")
}

model CatalogProduct {
  id             String          @id @default(cuid())
  vendor_id       String
  vendor         Vendor          @relation(fields: [vendor_id], references: [id])
  category_id     String
  category       Category        @relation(fields: [category_id], references: [id])
  title          String
  slug           String          @unique
  description    String?
  status         ProductStatus   @default(DRAFT)
  is_active       Boolean         @default(false)
  featured       Boolean         @default(false)
  seo_title       String?
  seo_description String?
  features       String[]
  available_locations String[]
  tags           String[]
  options        ProductOption[]
  variants       ProductVariant[]
  media          ProductMedia[]
  wishlist_items WishlistItem[]
  reviews        Review[]
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  @@map("catalog_products")
}

model Review {
  id          String   @id @default(cuid())
  product_id  String
  product     CatalogProduct @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user_id     String
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  rating      Int
  comment     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([product_id, user_id])
  @@map("reviews")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model ProductVariant {
  id                  String          @id @default(cuid())
  product_id           String
  product             CatalogProduct  @relation(fields: [product_id], references: [id])
  sku                 String          @unique
  title               String
  attributes          Json 
  price_cents          Int
  compare_at_price_cents Int?
  barcode             String?
  weight_grams         Int?            @default(0)
  track_inventory      Boolean         @default(true)
  allow_backorder      Boolean         @default(false)
  stock_quantity       Int             @default(0)
  available_locations  String[]
  inventory           InventoryTransaction[]
  selected_option_values ProductVariantOptionValue[]
  media               ProductVariantMedia[]
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt

  @@map("product_variants")
}

model ProductOption {
  id         String          @id @default(cuid())
  product_id  String
  product    CatalogProduct  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  name       String
  position   Int             @default(0)
  values     ProductOptionValue[]
  variant_selections ProductVariantOptionValue[]
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt

  @@map("product_options")
}

model ProductOptionValue {
  id         String        @id @default(cuid())
  option_id   String
  option     ProductOption @relation(fields: [option_id], references: [id], onDelete: Cascade)
  value      String
  position   Int           @default(0)
  variants   ProductVariantOptionValue[]

  @@map("product_option_values")
}

model ProductVariantOptionValue {
  id             String            @id @default(cuid())
  variant_id      String
  variant        ProductVariant    @relation(fields: [variant_id], references: [id], onDelete: Cascade)
  option_id       String
  option         ProductOption     @relation(fields: [option_id], references: [id], onDelete: Cascade)
  option_value_id  String
  optionValue    ProductOptionValue @relation(fields: [option_value_id], references: [id], onDelete: Cascade)

  @@index([variant_id])
  @@index([option_id])
  @@index([option_value_id])
  @@unique([variant_id, option_id])

  @@map("product_variant_option_values")
}

model ProductMedia {
  id        String         @id @default(cuid())
  product_id String
  product   CatalogProduct @relation(fields: [product_id], references: [id])
  url       String
  type      MediaType      @default(IMAGE)
  position  Int            @default(0)

  @@map("product_media")
}

enum MediaType {
  IMAGE
  VIDEO
  MODEL3D
}

model ProductVariantMedia {
  id         String           @id @default(cuid())
  variant_id  String
  variant    ProductVariant   @relation(fields: [variant_id], references: [id])
  url        String
  type       MediaType        @default(IMAGE)
  position   Int              @default(0)

  @@map("product_variant_media")
}

model Wishlist {
  id        String        @id @default(cuid())
  user_id   String        @unique
  user      User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  @@map("wishlists")
}

model WishlistItem {
  id              String    @id @default(cuid())
  wishlist_id     String
  wishlist        Wishlist  @relation(fields: [wishlist_id], references: [id], onDelete: Cascade)
  product_id      String
  product         CatalogProduct @relation(fields: [product_id], references: [id])
  product_variant_id String?
  created_at      DateTime  @default(now())

  @@unique([wishlist_id, product_id, product_variant_id])
  @@map("wishlist_items")
}

model InventoryTransaction {
  id         String         @id @default(cuid())
  variant_id  String
  variant    ProductVariant @relation(fields: [variant_id], references: [id])
  change     Int
  reason     InventoryReason
  notes      String?
  created_at  DateTime       @default(now())

  @@map("inventory_transactions")
}

enum InventoryReason {
  MANUAL_ADJUSTMENT
  SALE
  RETURN
  RECEIVING
  TRANSFER
}

model VatRate {
  id          String   @id @default(cuid())
  country     String
  province    String?
  rate        Float
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([country, province])
  @@map("vat_rates")
}

enum GiftCardStatus {
  ACTIVE
  INACTIVE
}

model GiftCard {
  id                   String          @id @default(cuid())
  code                 String          @unique
  customer_id          String?
  customer             Customer?       @relation(fields: [customer_id], references: [id])
  initial_value_cents  Int
  balance_cents        Int
  status               GiftCardStatus  @default(ACTIVE)
  notes                String?
  expires_at           DateTime?
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  transactions         GiftCardTransaction[]

  @@map("gift_cards")
}

enum GiftCardTransactionType {
  ISSUE
  REDEEM
  REFUND
  ADJUSTMENT
}

model GiftCardTransaction {
  id               String                     @id @default(cuid())
  gift_card_id     String
  gift_card        GiftCard                   @relation(fields: [gift_card_id], references: [id], onDelete: Cascade)
  type             GiftCardTransactionType
  amount_cents     Int
  notes            String?
  order_id         String?
  order            Order?                     @relation(fields: [order_id], references: [id])
  created_at       DateTime                   @default(now())

  @@map("gift_card_transactions")
}

enum RootCategory {
  ANIMALS_PET_SUPPLIES
  APPAREL_ACCESSORIES
  ARTS_ENTERTAINMENT
  BABY_TODDLER
  BUSINESS_INDUSTRIAL
  CAMERAS_OPTICS
  ELECTRONICS
  FOOD_BEVERAGES_TOBACCO
  FURNITURE
  HARDWARE
  HEALTH_BEAUTY
  HOME_GARDEN
  LUGGAGE_BAGS
  MATURE
  MEDIA
  OFFICE_SUPPLIES
  RELIGIOUS_CEREMONIAL
  SOFTWARE
  SPORTING_GOODS
  TOYS_GAMES
  VEHICLES_PARTS
  GIFT_CARDS
  UNCATEGORIZED
  SERVICES
  PRODUCT_ADD_ONS
  BUNDLES
}